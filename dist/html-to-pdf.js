"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.htmlToPdf = void 0;
const types_1 = require("./types");
const mustache_1 = __importDefault(require("mustache"));
const puppeteer_1 = __importDefault(require("puppeteer"));
const utils_1 = require("./utils");
const getHTML = async (options) => {
    let html = await (0, utils_1.getPageHTML)(options.template.type || types_1.HTMLType.CONTENT, options.template.content);
    if (options.data) {
        if (options.translations) {
            try {
                const translations = await (0, utils_1.getPageTranslations)(options.translations.resourceType, options.translations.translations);
                options.data = Object.assign(options.data, translations);
            }
            catch (error) {
                throw new Error('Invalid format for translations. Must be JSON');
            }
        }
        return mustache_1.default.render(html, options.data);
    }
    return html;
};
const htmlToPdf = async (options) => {
    var _a, _b, _c, _d;
    if (!options.pdf) {
        options.pdf = {};
    }
    if (!options.template && !options.url) {
        throw new Error('At least one of template or url must be specified');
    }
    const browser = await puppeteer_1.default.launch({ headless: true });
    const page = await browser.newPage();
    if ((_a = options.page) === null || _a === void 0 ? void 0 : _a.height) {
        await page.setViewport({
            width: options.page.width || 1600,
            height: options.page.height || 745.60,
        });
    }
    if (options.template) {
        const html = await getHTML(options);
        await page.setContent(html, { waitUntil: 'networkidle0' });
        if ((_b = options.template.css) === null || _b === void 0 ? void 0 : _b.content) {
            const pageStyles = (0, utils_1.getPageStylesAndScript)(options.template.css.type, options.template.css.content);
            await page.addStyleTag(pageStyles);
        }
        if ((_c = options.template.script) === null || _c === void 0 ? void 0 : _c.content) {
            const pageScript = (0, utils_1.getPageStylesAndScript)(options.template.script.type, options.template.script.content);
            await page.addScriptTag(pageScript);
        }
    }
    else {
        await page.goto((_d = options.url) === null || _d === void 0 ? void 0 : _d.link, { waitUntil: 'networkidle0' });
        if (options.url.auth) {
            await page.authenticate({
                username: options.url.auth.username,
                password: options.url.auth.password,
            });
        }
    }
    const pdfOptions = {
        format: options.pdf.format || 'A4',
        scale: options.pdf.scale || 1,
        landscape: options.pdf.landscape || false,
        margin: options.pdf.margin ? options.pdf.margin : undefined,
        displayHeaderFooter: !!options.template.header || !!options.template.footer,
        headerTemplate: options.template.header,
        footerTemplate: options.template.footer,
    };
    if (options.pdf.writeStream) {
        const pdfStream = await page.createPDFStream(pdfOptions);
        pdfStream.pipe(options.pdf.writeStream);
        pdfStream.on('end', async () => {
            await browser.close();
        });
    }
    else {
        const pdf = await page.pdf(pdfOptions);
        await browser.close();
        return pdf;
    }
};
exports.htmlToPdf = htmlToPdf;
//# sourceMappingURL=data:application/json;base64,